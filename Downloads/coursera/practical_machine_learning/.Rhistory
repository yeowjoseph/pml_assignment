lm(x~y)
lm(y~x)
fit <- lm(x~y)
summary(fit)
summary(fit)$coefficients
summary(fit)
e <- resid(fit)
e
yhat <- predict(fit)
max(abs(e-(e-yhat)))
x
y
fit <- lm(x~y)
e <- resid(fit)
predict(fit)
max(abs(e-(y-yhat)))
fit <- lm(x~y)
summary(fit)$sigma
fit <- lm(y~x)
summary(fit)$sigma
summary(fit)$coefficients
fit <- lm(y~x)
summary(fit)$coefficients
fit <- lm(x~y)
summary(fit)$coefficients
data(mtcars)
fit <- lm(mpg~weight, data=mtcars)
mtcars
fit <- lm(mpg~wt, data=mtcars)
head(mtcars)
fit <- lm(mpg~wt, data=mtcars)
summary(fit)
suCoef <- summary(fit)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoef
summary(fit)
sumCoef[1,1]
sumCoef[-1,1]
sumCoef[2,1]
sumCoef[3,1]
sumCoef[1,1]+c(-1,1)*qt(.975, df=fit$df) * sumCoef[1,2]
sumCoef[1,1]+c(-1,1)*qt(.95, df=fit$df) * sumCoef[1,2]
sumCoef[1,1]+c(-1,1)*qt(.975, df=fit$df) * sumCoef[1,2]
fit$df
fit
sumCoef[2,1]+c(-1,1)*qt(.975, df=fit$df) * sumCoef[2,2]
help(mtcars)
mtcars
new.wt <- data.frame(c(3))
new.wt
wt
new
fit
predict(fit,newdata=new.wt,interval='prediction')
new.wt
newcar <- data.frame(3)
newcar
predict(fit,newdata=newcar,interval='prediction')
predict(fit,newdata=newcar,interval='prediction')
fit
newwt <- data.frame(x=3)
newwt
newwt <- data.frame(wt=3)
predict(fit,newdata=newcar,interval='prediction')
predict(fit,newdata=newwt,interval='prediction')
head(mtcars)
newton <- data.frame(wt=2)
predict(fit,newdata=newwt,interval='confidence')
sumCoef[2,1]+c(-1,1)*qt(.975, df=fit$df) * sumCoef[2,2]
(sumCoef[2,1]+c(-1,1)*qt(.975, df=fit$df) * sumCoef[2,2])/2
(sumCoef[2,1]+c(-1,1)*qt(.975, df=fit$df) * sumCoef[2,2])/1000
(sumCoef[2,1]+c(-1,1)*qt(.975, df=fit$df) * sumCoef[2,2])*2
fit <- lm(mpg~wt,data=mtcars)
fit
summary(fit)
fit
mean(mtcars$wt)
newwt <- data.frame(wt=mean(mtcars$wt))
newwt
predict(fit,newdata=newwt,interval='confidence')
data(mtcars)
summary(mtcars)
head(mtcars)
data(mtcars)
head(mtcars)
lm(mpg~*,data=mtcars)
lm(mpg~.,data=mtcars)
fit <- lm(mpg ~ ., data = mtcars)
summary(fit)
head(mtcars)
library(datasets)
require(stats)
require(graphics)
pairs(mtcars,panel = panel.smooth,main="mtcars data")
pairs(mtcars,panel = panel.smooth,main="mtcars data", col=3)
pairs(mtcars,panel = panel.smooth,main="mtcars data")
summary(mtcars)
?mtcars
pairs(mtcars,panel = panel.smooth,main="mtcars data")
?mtcars
head(mtcars)
fit <- lm(mpg ~ cyl, data = mtcars)
summary(fit)
resid(fit)
fit <- lm(mpg ~ cyl, data = mtcars)
summary(fit)
summary(mtcars)
fit <- lm(mpg ~ cyl, data = mtcars)
summary(fit)
fit <- lm(mpg ~ disp, data = mtcars)
summary(fit)
fit <- lm(mpg ~ hp, data = mtcars)
summary(fit)
fit <- lm(mpg ~ carb, data = mtcars)
summary(fit)
fit <- lm(mpg ~ ., data = mtcars)
summary(fit)
fit <- lm(mpg ~ cyl, data = mtcars)
summary(fit)
fit <- lm(mpg ~ cyl+disp, data = mtcars)
summary(fit)
fit <- lm(mpg ~ am, data = mtcars)
summary(fit)
data(insectsprays)
data(insectSprays)
data(insectSpray)
data(insectspray)
data(insect)
data(spray)
summary(mtcars)
str(mtcars)
df <- data.frame(mtcars)
df
summary(df)
str(am)
df
summary(df)
str(df)
levels(df$am)
df$am <- factor(df$am)
df
levels(df$am)
fit <- lm(mpg ~ am, data = df)
summary(fit)
fit <- lm(mpg ~ am-1, data = df)
summary(fit)
fit <- lm(mpg ~ hp, data = mtcars)
summary(fit)
fit <- lm(mpg ~ ., data = mtcars)
summary(fit)
head(mtcars)
summary(mtcars)
fit <- lm(mpg ~ ., data = mtcars)
reduced.model <- step(full.model, direction="backward")
reduced.model <- step(step, direction="backward")
reduced.model <- step(step, direction="backward")
reduced.model <- step(fit, direction="backward")
summary(reduced.model)
reduced.model.forward <- step(fit, direction="forward")
summary(reduced.model.forward)
summary(reduced.model.forward)
summary(mtcars)
summary(reduced.model)
summary(mtcars)
head(mtcars)
summary(reduced.model)
requrie(graphics)
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,panel = panel.smooth, rows=1)
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,panel = panel.smooth, rows=1)
coplot(mpg ~ wt | as.factor(am), data = mtcars,panel = panel.smooth, rows=1)
summary(mtcars)
reduced.model <- step(fit, direction="backward")
summary(reduced.model)
fit <- lm(mpg ~ am, data = df)
summary(fit)
test <- lm(mpg~cyl, data=mtcars)
summary(test)
test <- lm(mpg~disp, data=mtcars)
summary(test)
head(mtcars)
test <- lm(mpg~hp, data=mtcars)
summary(test)
coplot(mpg ~ am), data = mtcars,panel = panel.smooth, rows=1)
coplot(mpg ~ am, data = mtcars,panel = panel.smooth, rows=1)
coplot(mpg ~ wt | as.factor(am), data = mtcars,panel = panel.smooth, rows=1)
coplot(mpg ~ am, data = mtcars,panel = panel.smooth, rows=1)
coplot(mpg ~ wt, data = mtcars,panel = panel.smooth, rows=1)
```
?mtcars
?step
?t.test
?mtcars
?step
?pairs
?step
?coplot
?confint
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, data=galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-lrs
lhs -rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
skip
skip()
exit
exit()
0
bye()
swirl()
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
bye()
swirl()
lm(child~parent, data=galton)
fit <- lm(child~parent, data=galton)
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
Volume ~ Girth - 1
fit <- lm(Volume ~ . - 1, trees)
trees2 <- eliminate("Girth", trees)
View(tress2)
heasd(trees2)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2).
fit2 <- lm(Volume ~ . - 1, trees2)
lapply(list(fit, fit2), coef)
packageVersion("AppliedPredictiveModeling")
packageVersion("caret")
install.packages("AppliedPredictiveModeling")
packageVersion("AppliedPredictiveModeling")
install.packages("caret")
packageVersion("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagosis)
adData = data.frame(diagnosis)
adData
summary(AlzheimerDisease)
AlzheimerDisease
adData = data.frame(diagnosis)
summary(data(AlzheimerDisease))
x<-data(AlzheimerDisease)
x
data(AlzheimerDisease)
diagnosis
predictors
diagnosis
data(mpg)
mpg
AlzheimerDisease
data(AlzheimerDisease)
AlzheimerDisease
mpg
summary(mpg)
data(AlzheimerDisease)
AlzheimerDisease
model
data(mpg)
model
mpg$model
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis,p=0.5,list=TRUE)
testIndex
training = adData[-testIndex,]
training = adData[testIndex,]
training = adData[testIndex, ]
training = adData[testIndex]
length(testIndex)
testIndex
summary(testIndex)
summary(-testIndex)
summary(adData)
length(adData)
summary(testIndex)
testIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
length(training)
length(testing)
training
sumary(training)
summary(training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
diagnosis
predictors
data)AlzheimerDisease
data(AlzheimerDisease)
diagnosis
predictors
summary(predictors)
str(predictors)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p=3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
training
str(training)
training[IL*,]
training[IL_11,]
training[IL_11]
training[,IL_11]
training$IL_11
training[,IL_11]
training[,1]
training[,2]
training[,3]
str(training)
training[,c("IL_11")]
str(training)
training[,c("IL_11", "IL13", "IL16", "IL_17E")]
training[,c("IL_11", "IL_13", "IL_16", "IL_17E")]
str(training)
library(Applied{redictiveModeling)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures [inTrain,]
testing = mixtures[-inTrain,]
training
str(training)
hist(training$Superplasticizer)
summary(training)
mean(training$Superplasticizer)
std(training$Superplasticizer)
sd(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
d <- data(AlzheimerDisease)
d
diagnosis
str(disgnosis)
str(d)
summary(diagnosis)
summary(predictors)
str(predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
adData = data.frame(diagnosis,predictors)
training = adData[ inTrain,]
testing = adData[-inTrain,]
adData = data.frame(diagnosis,predictors)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
training[,-c(IL_11)]
training[,-c('IL_11')]
training[,c('IL_11')]
training[,c(IL_11)]
training[,c('IL_11','IL_13')]
x <- training[,c('IL_11','IL_13')]
x
str(x)
str(training)
x <- training[,c('IL_11','IL_13','IL_16','IL_17E','IL_1alpha','IL_3','IL_4','IL_5','IL_6','IL_6_Receptor','IL_7','IL_8')]
str(x)
preProc <- preProcess(log10(x+1),method="pca",pcaComp=7)
x
str(x)
preProc <- preProcess(log10(x+1),method="pca",pcaComp=2)
preProc <- preProcess(x+,method="pca",pcaComp=2)
preProc <- preProcess(x,method="pca",pcaComp=2)
preProc
xhat <- predict(preProc,x)
plot(xhat[,1],xhat[,2],col=typeColor)
plot(xhat[,1],xhat[,2])
preProc <- preProcess(x,method="pca",pcaComp=7)
xhat <- predict(preProc,x)
summary(preProc)
summary$call
summary(preProc)$call
?preprocess
?preprocess()
??preprocess
preProc <- preProcess(x,method="pca",thresh=0.8)
summary(preProc)
preProcess(x,method="pca",thresh=0.8)
preProcess(x,method="pca")
preProcess(x,method="pca",thresh=0.8)
preProcess(x,method="pca")
preProcess(x,method="pca",pcaComp=7)
preProcess(x,method="pca",pcaComp=7)
preProc <- preProcess(x,method="pca",pcaComp=7)
trainPC <- predict(preProc,x)
modelFit <- train()
str(training)
modelFit <- train(training$diagnosis ~ x, method="glm", data=trainPC)
x
str(x)
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainPC)
modelFit <- train(training$diagnosis~., method="glm", data=trainPC)
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
training$diagnosis
trainPC
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
modelFit<-train(training$diagnosis~.,data=trainPC)
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
install.packages('e1071', dependencies = TRUE)
install.packages('caret', dependencies=TRUE)
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
testPC <- predict(preProc,x)
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
testPC <- predict(preProc,x)
x
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
diagnosis
inTrain
training
testing
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
modelFit
trainPC
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
modelFiut
modelFit
modelFit
modelFit
modelFit
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
modelFit
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
modelFit
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
modelFit
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
modelFit
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
modelFit
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
predict(modelFit,testing)
testing
modelFit
testing$diagnosis
predict(modelFit,testing)
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
modelFit
summary(modelFit)
summary(testing)
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
modelFit
modelFit<-train(training$diagnosis~.,method="glm",data=training)
modelFit
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
y <- testing[,c('IL_11','IL_13','IL_16','IL_17E','IL_1alpha','IL_3','IL_4','IL_5','IL_6','IL_6_Receptor','IL_7','IL_8')]
preProcY <- preProcess(y,method="pca",thresh=0.8)
testPC <- predict(preProcY,y)
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
testPC <- predict(preProcY,y)
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
testPC <- predict(preProc,y)
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
testPC <- predict(preProc,y)
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
y <- testing[,c('IL_11','IL_13','IL_16','IL_17E','IL_1alpha','IL_3','IL_4','IL_5','IL_6','IL_6_Receptor','IL_7','IL_8')]
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
getwd()
setwd("/Users/joseph/Downloads/coursera/practical_machine_learning")
getwd()
